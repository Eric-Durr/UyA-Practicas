{"version":3,"sources":["media/js/cloud.js"],"names":["Zdog","Illustration","Ellipse","Anchor","Group","TAU","Shape","canvas","document","querySelector","width","height","illustration","element","zoom","dragRotate","stroke","dial","addTo","diameter","color","anchorSeconds","path","x","y","closed","translate","anchorMinutes","copyGraph","anchorHours","forEach","hand","indexHand","children","child","indexChild","startingDate","Date","seconds","getSeconds","minutes","getMinutes","hours","getHours","rotate","z","animate","updateRenderGraph","requestAnimationFrame","now"],"mappings":"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","file":"cloud.add31d0a.js","sourceRoot":"..","sourcesContent":["\n  // extract the necessary modules from the Zdog library\nconst {\n    Illustration, Ellipse, Anchor, Group, TAU, Shape,\n  } = Zdog;\n  \n  const canvas = document.querySelector('canvas');\n  const { width, height } = canvas;\n  \n  // create an illustration out of the canvas element\n  const illustration = new Illustration({\n    element: '.zdog-canvas',\n    zoom:0.5,\n    // allow for drag\n    dragRotate: true,\n  });\n  \n  // stroke used for the dial and to compute the stroke of the other shapes\n  const stroke = 20;\n  \n  // group describing the clock's dial\n  const dial = new Group({\n    addTo: illustration,\n  });\n  // outer stroke\n  new Ellipse({\n    addTo: dial,\n    stroke,\n    diameter: width - stroke,\n    color: '#272A5B',\n  });\n  // inner circle\n  new Ellipse({\n    addTo: dial,\n    stroke,\n    color: '#272A5B',\n  });\n  \n  // for each hand include an anchor element, to rotate from the center of the clock\n  const anchorSeconds = new Anchor({\n    addTo: illustration,\n  });\n  \n  // each hand is made of a path and a circle\n  // the path reaches outward before using an arc to wrap around the circle\n  new Shape({\n    addTo: anchorSeconds,\n    stroke: stroke / 2,\n    color: 'hsl(60, 80%, 52%)',\n    path: [\n      { x: 0, y: -stroke },\n      { x: 0, y: -height / 2 },\n    ],\n    closed: false,\n    // rotate: { y: TAU / 2 },\n  });\n  \n  // the circle is positioned at the center of the hypothetical circle made by the path's arcs\n  new Ellipse({\n    addTo: anchorSeconds,\n    stroke,\n    color: 'hsl(60, 95%, 52%)',\n    translate: { y: -height / 5 - 35 },\n  });\n  \n  \n  // copy the anchor for the other two hands\n  const anchorMinutes = anchorSeconds.copyGraph();\n  const anchorHours = anchorSeconds.copyGraph();\n  \n  // loop through the children of every anchor to update the hue\n  // starting at 60 and rotating around the color wheel\n  [anchorSeconds, anchorMinutes, anchorHours].forEach((hand, indexHand) => {\n    hand.children.forEach((child, indexChild) => {\n      child.color = `hsl(${60 + 120 * indexHand}, ${80 + 15 * indexChild}%, 52%)`;\n    });\n  });\n  \n  // retrieve the current number of seconds, minutes and hours\n  const startingDate = new Date();\n  \n  let seconds = startingDate.getSeconds();\n  let minutes = startingDate.getMinutes();\n  let hours = startingDate.getHours();\n  \n  // for each anchor rotate the first child according to the time's value\n  // the idea is to have the arc wrap always below the circle\n  anchorSeconds.children[0].rotate.y = seconds > 30 ? TAU / 2 : 0;\n  anchorMinutes.children[0].rotate.y = minutes > 30 ? TAU / 2 : 0;\n  hours = hours > 12 ? hours - 12 : hours;\n  anchorHours.children[0].rotate.y = hours > 6 ? TAU / 2 : 0;\n  \n  // rotate the anchors according to the initial value\n  anchorSeconds.rotate.z = TAU / 60 * seconds;\n  anchorMinutes.rotate.z = TAU / 60 * minutes;\n  anchorHours.rotate.z = TAU / 12 * hours;\n  \n  // function called through the request animation function\n  function animate() {\n    // update the graph\n    illustration.updateRenderGraph();\n    requestAnimationFrame(animate);\n  \n    // retrieve an instance of the date object\n    const now = new Date();\n    // if the number of seconds changes from the previous observation, update teh matching anchor\n    if (now.getSeconds() !== seconds) {\n      seconds = now.getSeconds();\n      anchorSeconds.rotate.z = TAU / 60 * seconds;\n      // if the hand passes past the pre-established threshold, rotate the path to wrap it around the circle in the opposite direction\n      if (seconds === 30 || seconds === 0) {\n        anchorSeconds.children[0].rotate.y += TAU / 2;\n      }\n      // repeat for the number of minutes and hours\n      if (now.getMinutes() !== minutes) {\n        minutes = now.getMinutes();\n        anchorMinutes.rotate.z = TAU / 60 * minutes;\n        if (minutes === 30 || minutes === 0) {\n          anchorMinutes.children[0].rotate.y += TAU / 2;\n        }\n        if (now.getHours() !== minutes) {\n          hours = now.getHours();\n          anchorHours.rotate.z = TAU / 24 * hours;\n          if (hours % 6 === 0) {\n            anchorHours.children[0].rotate.y += TAU / 2;\n          }\n        }\n      }\n    }\n  }\n  \n  animate();\n  "]}